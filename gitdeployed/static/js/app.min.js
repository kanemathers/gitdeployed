angular.module('gitdeployed', [
    'gitdeployed.controllers',
    'gitdeployed.services',
    'gitdeployed.directives',
    '$strap.directives'
])

.config([
    '$routeProvider',
    '$httpProvider',

    function($routeProvider, $httpProvider)
    {
        $routeProvider
            .when('/repos', {
                controller:  'ReposListCtrl',
                templateUrl: '/partials/repos.html'
            })
            .when('/config', {
                controller:  'ConfigCtrl',
                templateUrl: '/partials/config.html'
            })

            .otherwise({redirectTo: '/repos'});

        var interceptor = [
            '$rootScope',
            '$q',

            function($rootScope, $q)
            {
                var success = function(response)
                {
                    return response;
                };

                var error = function(response)
                {
                    if (response.status != 403)
                        return $q.reject(response);

                    var deferred = $q.defer();
                    var request  = {
                        config:   response.config,
                        deferred: deferred
                    };

                    $rootScope.requestQueue.push(request);
                    $rootScope.$broadcast('auth:required');

                    return deferred.promise;
                };

                return function(promise)
                {
                    return promise.then(success, error);
                };
            }
        ];

        $httpProvider.responseInterceptors.push(interceptor);
    }
])

.run([
    '$rootScope',
    '$http',

    function($rootScope, $http)
    {
        $rootScope.requestQueue = [];

        var retry = function(request)
        {
            $http(request.config).then(request.deferred.resolve);
        };

        $rootScope.$on('auth:success', function()
        {
            angular.forEach($rootScope.requestQueue, retry);
        });
    }
]);
angular.module('gitdeployed.directives', [])

.directive('btnDelete', [
    '$q',
    '$timeout',

    function($q, $timeout)
    {
        var tickText = function(total)
        {
            return function()
            {
                return (!total) ? 'Delete' :  'Really? (' + total-- + ')';
            };
        };

        return {
            restrict: 'A',
            scope:    {
                btnDelete: '&'
            },
            link: function(scope, element, attrs)
            {
                var confirm = function()
                {
                    var deferred = $q.defer();
                    var ticks    = 3
                    var btnText  = tickText(ticks);
                    var timer    = {
                        confirm: null,
                        pending: null
                    };

                    var clickFn = function()
                    {
                        clearTimeout(timer.pending);

                        element
                            .unbind('click.tmp')
                            .removeClass('btn-danger');

                        scope.$apply(deferred.resolve);
                    };

                    var tick = function()
                    {
                        element.text(btnText());

                        if (--ticks !== 0)
                            return;

                        clearInterval(timer.confirm);

                        element
                            .removeClass('disabled')
                            .bind('click.tmp', clickFn);

                        timer.pending = setTimeout(function()
                        {
                            element
                                .unbind('click.tmp')
                                .removeClass('btn-danger');

                            scope.$apply(deferred.reject);
                        }, 5000);
                    };

                    element
                        .addClass('disabled btn-danger')
                        .text(btnText());

                    timer.confirm = setInterval(tick, 1000);

                    return deferred.promise;
                };

                element.click(function()
                {
                    if (element.hasClass('btn-danger'))
                        return;

                    confirm().then(function()
                    {
                        scope.btnDelete();
                    });
                });
            }
        };
    }
]);
angular.module('gitdeployed.controllers', [
    'gitdeployed.services'
])

.controller('LoginCtrl', [
    '$scope',
    '$http',

    function($scope, $http)
    {
        $scope.authed = true;

        $scope.login = function()
        {
            $http.post('/login', {
                username: this.username,
                password: this.password
            })
            .success(function(user)
            {
                $scope.authed = true;
                $scope.error  = '';

                $scope.$emit('auth:success', user);
            })
            .error(function(resp)
            {
                $scope.error = resp;
            });
        };

        $scope.$on('auth:required', function()
        {
            $scope.authed = false;
        });
    }
])

.controller('ReposListCtrl', [
    '$scope',
    'Repos',

    function($scope, Repos)
    {
        $scope.setActive = function(repo)
        {
            $scope.activeRepo = repo;
        };

        $scope.deleteRepo = function(repo)
        {
            repo.$delete(function()
            {
                for (var i = 0; i < $scope.repos.length; i++)
                {
                    if ($scope.repos[i].id != repo.id)
                        continue;

                    $scope.repos.splice(i, 1);

                    break;
                };

                $scope.setActive($scope.repos[0]);
            });

            $scope.activeRepo = null;
        };

        $scope.$on('repos.new', function(event, repo)
        {
            $scope.repos.push(repo);
            $scope.setActive(repo);
        });

        Repos.query(function(repos)
        {
            $scope.repos = repos;

            $scope.setActive(repos[0]);
        });
    }
])

.controller('ReposNewCtrl', [
    '$scope',
    'Repos',

    function($scope, Repos)
    {
        $scope.addRepo = function(fn)
        {
            if (!this.upstream)
                return false;

            var repo = new Repos({
                path:     this.path || null,
                upstream: this.upstream
            });

            repo.$save(function(resp)
            {
                $scope.error = null;

                $scope.$emit('repos.new', resp);
                fn();
            },
            function(resp)
            {
                $scope.error = resp.data;
            });
        };
    }
])

.controller('ConfigCtrl', [
    '$scope',

    function($scope)
    {
        
    }
]);
angular.module('gitdeployed.services', [
    'ngResource'
])

.factory('Repos', [
    '$resource',

    function($resource)
    {
        return $resource('/repos/:repoId', {repoId: '@id'});
    }
]);
